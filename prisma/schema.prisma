generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id        String    @id @default(uuid())
  value     String    @unique
  label     String
  icon      String
  contents  Content[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Tag {
  id         String       @id @default(uuid())
  name       String       @unique
  ContentTag ContentTag[]
}

model ContentTag {
  tagId     String
  tag       Tag     @relation(fields: [tagId], references: [id])
  contentId String
  content   Content @relation(fields: [contentId], references: [id])

  @@id([contentId, tagId])
}

model Content {
  id                String              @id @default(uuid())
  categoryId        String
  category          Category            @relation(fields: [categoryId], references: [id])
  title             String
  image             String
  link              String
  description       String
  contentTags       ContentTag[]
  curations         Curation[]
  UserContentAction UserContentAction[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  @@unique([title, categoryId])
  @@index([categoryId])
  @@index([createdAt])
}

model Curation {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  contentId String
  content   Content  @relation(fields: [contentId], references: [id])
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, contentId])
}

model User {
  id                String              @id @default(uuid())
  fullname          String
  username          String
  avatar            String?
  email             String              @unique
  password          String
  role              Role                @default(USER)
  curations         Curation[]
  UserContentAction UserContentAction[]
  isActive          Boolean             @default(false)
  isVerified        Boolean             @default(false)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model UserContentAction {
  id        String     @id @default(uuid())
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  contentId String
  content   Content    @relation(fields: [contentId], references: [id])
  type      ActionType
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([userId, contentId, type])
}

enum ActionType {
  BOOKMARK
  INSPIRED
  THANKS
}

enum Role {
  USER
  CURATOR
  ADMIN
}
